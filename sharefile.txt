#include "stdafx.h"
#include <windows.h>
#include <iostream>
#include <atlstr.h>
#include <AccCtrl.h>
#include <Aclapi.h>
#include <atlsecurity.h>
#pragma comment(lib,"Advapi32.lib")
using namespace std;
BOOL EnableFileAccountPrivilege (PCTSTR pszPath, PCTSTR pszAccount)
{
    BOOL bSuccess = TRUE;
    PACL pNewDacl = NULL, pOldDacl = NULL;
    EXPLICIT_ACCESS ea;
    while(FALSE){
        // 获取文件(夹)安全对象的DACL列表
        if (ERROR_SUCCESS != GetNamedSecurityInfo((LPTSTR)pszPath, SE_FILE_OBJECT, DACL_SECURITY_INFORMATION, NULL, NULL, &pOldDacl, NULL, NULL)){
            bSuccess = FALSE;
            break;
        }
        // 此处不可直接用AddAccessAllowedAce函数,因为已有的DACL长度是固定,必须重新创建一个DACL对象
        // 生成指定用户帐户的访问控制信息(这里指定赋予全部的访问权限)
        ::BuildExplicitAccessWithName(&ea, (LPTSTR)pszAccount, GENERIC_ALL, GRANT_ACCESS, SUB_CONTAINERS_AND_OBJECTS_INHERIT);
        // 创建新的ACL对象(合并已有的ACL对象和刚生成的用户帐户访问控制信息)
        if (ERROR_SUCCESS != ::SetEntriesInAcl(1, &ea, pOldDacl, &pNewDacl)){
            bSuccess = FALSE;
            break;
        }
        // 设置文件(夹)安全对象的DACL列表
        if (ERROR_SUCCESS != ::SetNamedSecurityInfo((LPTSTR)pszPath, SE_FILE_OBJECT, DACL_SECURITY_INFORMATION, NULL, NULL, pNewDacl, NULL)){
            bSuccess = FALSE;
        }
    }
        // 释放资源
    if (pNewDacl != NULL)
        ::LocalFree(pNewDacl);
    return bSuccess;
}
BOOL AtlEnableFileAccountPrivilege(PCTSTR pszPath, PCTSTR pszAccount){
    CDacl dacl;
    CSid sid;
    // 获取用户帐户标志符
    if (!sid.LoadAccount(pszAccount)){
        return FALSE;
    }
        // 获取文件(夹)的DACL
    if (!AtlGetDacl(pszPath, SE_FILE_OBJECT, &dacl)){
        return FALSE;
    }
    // 在DACL中添加新的ACE项
    dacl.AddAllowedAce(sid, GENERIC_ALL);
    // 设置文件(夹)的DACL
    return AtlSetDacl(pszPath, SE_FILE_OBJECT, dacl) ? TRUE : FALSE;
}
void main(void)
{
    DWORD i, dwSize = 0, dwResult = 0;
    HANDLE hToken;
    PTOKEN_GROUPS pGroupInfo;
    SID_NAME_USE SidType;
    TCHAR lpName[MAX_PATH * 2];
    TCHAR lpDomain[MAX_PATH * 2];
    BYTE sidBuffer[MAX_PATH * 2];
    PSID pSID = (PSID)&sidBuffer;
    SID_IDENTIFIER_AUTHORITY SIDAuth = SECURITY_NT_AUTHORITY;
    DWORD dwLength = 0;
 
    {
        if (!OpenProcessToken( GetCurrentProcess(), TOKEN_ALL_ACCESS, &hToken )) {
            printf( "OpenProcessToken Error %u\n", GetLastError() );
        }
        if(!GetTokenInformation(hToken, TokenGroups, NULL, dwSize, &dwSize)) {
            dwResult = GetLastError();
            if( dwResult != ERROR_INSUFFICIENT_BUFFER ) {
                printf( "GetTokenInformation Error %u\n", dwResult );
            }
        }
        pGroupInfo = (PTOKEN_GROUPS) GlobalAlloc( GPTR, dwSize );
        if(! GetTokenInformation(hToken, TokenGroups, pGroupInfo, dwSize, &dwSize ) ) {
            printf( "GetTokenInformation Error %u\n", GetLastError() );
        }
    }
 
    if(! AllocateAndInitializeSid( &SIDAuth, 2, SECURITY_BUILTIN_DOMAIN_RID, DOMAIN_ALIAS_RID_ADMINS, 0, 0, 0, 0, 0, 0, &pSID) ){
        printf( "AllocateAndInitializeSid Error %u\n", GetLastError() );
    }
 
    for(i=0; i<pGroupInfo->GroupCount; i++) {
        dwSize = MAX_PATH;
        if(!LookupAccountSid(NULL, pGroupInfo->Groups[i].Sid, lpName, &dwSize, lpDomain, &dwSize, &SidType )){
            dwResult = GetLastError();
            if( dwResult == ERROR_NONE_MAPPED )
                wcscpy_s(lpName, dwSize, L"NONE_MAPPED" );
            else {
                printf("LookupAccountSid Error %u\n", GetLastError());
            }
        }
        else{
            EnableFileAccountPrivilege(L"D:\\ww",lpName);//创建一个文件夹
            AtlEnableFileAccountPrivilege(L"D:\\ww",lpName);
        }
    }
 
    if (pSID)
        FreeSid(pSID);
    if ( pGroupInfo )
        GlobalFree( pGroupInfo );
} 







BOOL GetSID(CString& csSID)
{
    BOOL bRes = FALSE;
    csSID.Empty();
 
    char acUserName[UNLEN + 1];
    ::SecureZeroMemory(acUserName, sizeof(acUserName));
    DWORD dwLength = UNLEN;  
 
    bRes = ::GetUserNameA(acUserName, &dwLength);
    if (bRes)
    {
        BYTE sidBuffer[100];
        ::SecureZeroMemory(acUserName, sizeof(sidBuffer));
        PSID psid = (PSID)&sidBuffer;
        DWORD sidBufferSize = 100;
        char domainBuffer[80];
        ::SecureZeroMemory(acUserName, sizeof(domainBuffer));
        DWORD domainBufferSize = 80;
        SID_NAME_USE snu;
 
        //Get SID
        bRes = LookupAccountNameA(0, acUserName, psid, &sidBufferSize, domainBuffer, &domainBufferSize, &snu);
        if (bRes)
        {
            char* cSid = NULL;
            bRes = ConvertSidToStringSidA(psid, &cSid);
            if (bRes)
            {
                csSID = cSid;
            }
            if (cSid)
            {                
                LocalFree((HLOCAL)cSid); // Release sid space
            }
        }
    }
 
    return bRes;
}

BOOL GetFileSD(wstring strFile, PSECURITY_DESCRIPTOR *pFileSD, PACL *pACL)
{
BOOL bRetVal = FALSE;
DWORD dwErr = 0;
SECURITY_INFORMATION secInfo = DACL_SECURITY_INFORMATION;

if (strFile.length() == 0)
{
cout << "ERROR: empty file name specified.\n" << endl;
return FALSE;
}

HANDLE hFile = ::CreateFile(strFile.c_str(), READ_CONTROL, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL | FILE_FLAG_BACKUP_SEMANTICS, NULL);
if (hFile == INVALID_HANDLE_VALUE)
{
PrintWinError();
return FALSE;
}

dwErr = ::GetSecurityInfo(hFile, SE_FILE_OBJECT, secInfo, NULL, NULL, pACL, NULL, pFileSD);
if (dwErr != ERROR_SUCCESS)
{
PrintWinError(dwErr);
::CloseHandle(hFile);
return FALSE;
}

::CloseHandle(hFile);

return TRUE;
}

BOOL CheckPermissionsOnFile(wstring strFileName, DWORD genericAccessRights)
{
BOOL bRet = FALSE;

if (strFileName.length() < 1)
return FALSE;

PACL pFileDACL = NULL;
PSECURITY_DESCRIPTOR pFileSD = NULL;
BOOL bRetVal = GetFileSD(strFileName, &pFileSD, &pFileDACL);
if (FALSE == bRetVal)
{
cout << L"ERROR: Failed to get file SID\n" << endl;
goto CleanUp;
}

// If NULL DACL is present for the file that means that all access is present for this file. Therefore user has all the permissions.
if (NULL == pFileDACL)
{
bRet = TRUE;
goto CleanUp;
}

HANDLE hToken = NULL;
if (::OpenProcessToken( ::GetCurrentProcess(), TOKEN_IMPERSONATE | TOKEN_QUERY | TOKEN_DUPLICATE | STANDARD_RIGHTS_READ, &hToken ))
{
HANDLE hImpersonatedToken = NULL;
if (::DuplicateToken( hToken, SecurityImpersonation, &hImpersonatedToken ))
{
GENERIC_MAPPING mapping = { 0xFFFFFFFF };
PRIVILEGE_SET privileges = { 0 };
DWORD grantedAccess = 0, privilegesLength = sizeof( privileges );
BOOL result = FALSE;

mapping.GenericRead = FILE_GENERIC_READ;
mapping.GenericWrite = FILE_GENERIC_WRITE;
mapping.GenericExecute = FILE_GENERIC_EXECUTE;
mapping.GenericAll = FILE_ALL_ACCESS;

::MapGenericMask( &genericAccessRights, &mapping );

if (::AccessCheck( pFileSD, hImpersonatedToken, genericAccessRights, &mapping, &privileges, &privilegesLength, &grantedAccess, &result ))
{
bRet = (result == TRUE);
}
::CloseHandle( hImpersonatedToken );
}
::CloseHandle( hToken );
}

CleanUp:
if (pFileSD != NULL)
{
LocalFree(pFileSD);
}
return bRet;
}